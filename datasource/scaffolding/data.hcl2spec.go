// Code generated by "mapstructure-to-hcl2 -type Config,DatasourceOutPut"; DO NOT EDIT.

package scaffolding

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	MockOption *string `mapstructure:"mock" cty:"mock" hcl:"mock"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"mock": &hcldec.AttrSpec{Name: "mock", Type: cty.String, Required: false},
	}
	return s
}

// FlatDatasourceOutPut is an auto-generated flat version of DatasourceOutPut.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDatasourceOutPut struct {
	Foo *string `mapstructure:"foo" cty:"foo" hcl:"foo"`
	Bar *string `mapstructure:"bar" cty:"bar" hcl:"bar"`
}

// FlatMapstructure returns a new FlatDatasourceOutPut.
// FlatDatasourceOutPut is an auto-generated flat version of DatasourceOutPut.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DatasourceOutPut) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDatasourceOutPut)
}

// HCL2Spec returns the hcl spec of a DatasourceOutPut.
// This spec is used by HCL to read the fields of DatasourceOutPut.
// The decoded values from this spec will then be applied to a FlatDatasourceOutPut.
func (*FlatDatasourceOutPut) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"foo": &hcldec.AttrSpec{Name: "foo", Type: cty.String, Required: false},
		"bar": &hcldec.AttrSpec{Name: "bar", Type: cty.String, Required: false},
	}
	return s
}
